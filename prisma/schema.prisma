// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BillingType {
  PERCENT
  FIXED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum TicketStatus {
  CREATED
  CONFIRMED
  CANCELED
  REFUNDED
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  Event    Event[]
  ListName ListName[]

  @@index([email])
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Event {
  id          String     @id @default(uuid())
  name        String
  owner       User       @relation(fields: [userId], references: [id])
  userId      String     @map("user_id")
  description String
  createdAt   DateTime   @default(now()) @map("created_at")
  nameLists   ListName[]

  @@map("events")
}

model ListName {
  id          String       @id @default(uuid())
  name        String
  size        Int
  description String
  url         String
  signedUsers SignedUser[]
  eventId     String       @unique
  userId      String       @unique
  priceId     String       @unique

  price Price @relation(fields: [priceId], references: [id], onDelete: Cascade)
  owner User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("list_names")
}

model SignedUser {
  id         String       @id @default(uuid())
  listName   ListName     @relation(fields: [listNameId], references: [id], onDelete: Cascade)
  listNameId String
  name       String
  gender     Gender
  birthdate  DateTime
  createdAt  DateTime     @default(now()) @map(name: "created_at")
  status     TicketStatus

  @@map("signed_users")
}

model Price {
  id                  String      @id @default(uuid())
  value               Decimal
  discount            Decimal
  discountType        BillingType
  availableCommission Decimal
  commissionType      BillingType
  ListName            ListName?

  @@map("prices")
}
